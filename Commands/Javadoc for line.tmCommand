<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>bundleUUID</key>
	<string>452017E8-0065-49EF-AB9D-7849B27D9367</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -wKU

require 'stringio'
require ENV['TM_SUPPORT_PATH'] + '/lib/ui.rb'

# ===========
# = Helpers =
# ===========

def largest_argument(arguments)
  size = 0
  arguments.each do |arg|
    size = arg.size if arg.size &gt; size 
  end
  return size
end

def pretty_print(annotation, arguments, msg, size, spacing, initial_tab_stop_count)
  new_tab_stop_count = initial_tab_stop_count
  str = arguments.collect do |arg| 
    new_tab_stop_count = new_tab_stop_count+1
    if arg == ""
      "#{spacing} * #{annotation} ${#{new_tab_stop_count}:#{msg}}\n"
    else
      "#{spacing} * #{annotation} #{arg} ${#{new_tab_stop_count}:#{msg}}\n"
    end
    
  end
  return str.to_s , new_tab_stop_count
end

# ==========
# = Script =
# ==========

tab_stop_count = 1 
line_number    = ENV['TM_LINE_NUMBER'].to_i
current_line   = ENV['TM_CURRENT_LINE']
lines          = STDIN.readlines().to_a

if current_line.match(/def|class|object|trait/) != nil
  before, middle, after = begin 
    before      = lines.slice(0,line_number-1)
    middle      = lines.slice(line_number-1,lines.size).take_while { |line|
      line.match(/\{/).nil?
    }
    middle      = middle | lines.slice(line_number-1+middle.size,1)
    after       = lines.slice(line_number-1+middle.size,lines.size)
    [before, middle, after]
  end
  
  initial_spacing = current_line.scan(/^\s*/).to_s
  arguments       = middle.to_s.scan(/[^)](\w*\s?:\s?\w*)/).collect do |arg| arg.to_s.split(":").first end
  size            = largest_argument(arguments)

  comments = StringIO.new
  comments &lt;&lt; "#{initial_spacing}/** \n"
  comments &lt;&lt; "#{initial_spacing} * ${#{tab_stop_count}:I really should get around to writing some documentation} \n"
  
  tab_stop_count = tab_stop_count + 1 
    
  comments &lt;&lt; "${#{tab_stop_count}:"
  
  params, tab_stop_count = pretty_print("@param",arguments, "well isn't it obvious", size, initial_spacing, tab_stop_count)  
  returns, tab_stop_count = pretty_print("@return",[""], "dunno", size, initial_spacing, tab_stop_count)
  
  comments &lt;&lt; "#{initial_spacing} * \n"
  comments &lt;&lt; params.to_s
  comments &lt;&lt; returns.to_s
  comments &lt;&lt; "}"
  comments &lt;&lt; "#{initial_spacing} */\n"
  
  tab_stop_count = tab_stop_count+1
  
  before.each do | line | puts line.gsub(/`/,'\\\`') end
  print           comments.string.to_s
  print "${0:}" + middle.to_s
  after.each do | line | puts line.gsub(/`/,'\\\`') end
else
  TextMate::UI.tool_tip("Place the caret at a line that declares something")
  lines[line_number-1] = "${0:}" + lines[line_number-1]
  puts lines.to_s
end</string>
	<key>fallbackInput</key>
	<string>document</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>@D</string>
	<key>name</key>
	<string>Javadoc for line</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>source.scala</string>
	<key>uuid</key>
	<string>F56949E3-B311-4BD8-898C-7316E4134785</string>
</dict>
</plist>
